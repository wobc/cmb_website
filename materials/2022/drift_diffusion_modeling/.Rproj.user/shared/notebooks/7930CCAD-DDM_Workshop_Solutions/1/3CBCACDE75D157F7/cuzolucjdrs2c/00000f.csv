"0","# Parameters"
"0","v <- 3 # the systematic compentent in the noise, i.e., the drift rate"
"0","a <- 1 # height of the upper boundary, -a will be the height of the lower boundary"
"0","z <- 0 # the starting point, which we set to be exactly in the middle of the two boundaries"
"0","ter <- .3 # non-decisison time."
"0",""
"0","# Constants"
"0","s <- 1 # the diffusion constant, or the noise level. Often set to either 1 or .1 (scales drift rate and boundary accordingly)"
"0","dt <- .001 # the size of the time step we make on each accumulation of noise, 1 ms"
"0","tmax <- 10 # the maximum amount of time will accumulate evidence for"
"0","tmax_step <- tmax/dt # and also the max time in steps rather than absolute time"
"0",""
"0","ntrials <- 10"
"0","rts <- rep(NA, ntrials) # vector to store RTs"
"0","resps <- rep(NA, ntrials) # vector to store the responses"
"0",""
"0","for (trial in 1:ntrials) {"
"0","  "
"0","  tstep <- 1 # you will need count time steps rather than absolute time (to be able to use this as an index for the evidence vector)"
"0","  x <- rep(NA, tmax_step) # a vector to store the evidence at each time step in"
"0","  x[1] <- z # set the initial evidence to the starting point (zero in this case)"
"0",""
"0","  while (tstep < tmax_step){"
"0","    x[tstep+1] <- x[tstep] + v*dt + s*sqrt(dt)*rnorm(1, 0, 1)"
"0","    if (x[tstep] > a) {"
"0","      resps[trial] <- 1"
"0","      break"
"0","    } else if (x[tstep] < -a) {"
"0","      resps[trial] <- 0"
"0","      break"
"0","    }"
"0","    tstep <- tstep + 1"
"0","  }"
"0","  rts[trial] <- tstep*dt + ter"
"0","}"
"0","data <- data.frame(rt = rts, resp = resps)"
"0","print(data)"
